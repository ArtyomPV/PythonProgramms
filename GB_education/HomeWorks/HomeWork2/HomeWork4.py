# Задача 22: Даны два неупорядоченных набора целых чисел 
# (может быть, с повторениями). Выдать без повторений 
# в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n - кол-во элементов первого множества. 
# m - кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.
# =========================================================================================
def solution1():
    def fill_list(lst, size):
        i = 1   
        while size > 0:
            lst.append(int(input(f"Введите {i} целое число - ")))
            i += 1
            size -= 1
        return lst
    
    n = int(input("Введите количество элементов первого списка n - "))
    m = int(input("Введите количество элементов второго списка m - "))
    lst_n = []
    lst_m = []
    print("Введите элементы первого списка ")
    set_n = set(fill_list(lst_n, n))
    print("Введите элементы второго списка ")
    set_m = set(fill_list(lst_m, m))

    list_mn = sorted(list(set_n.intersection(set_m)))
    print(list_mn)
# =========================================================================================
# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. 
# Она растет на круглой грядке, причем кусты высажены только по окружности. 
# Таким образом, у каждого куста есть ровно два соседних. 
# Всего на грядке растет N кустов.
# Эти кусты обладают разной урожайностью, поэтому 
# ко времени сбора на них выросло различное число 
# ягод – на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система 
# автоматического сбора черники. Эта система состоит 
# из управляющего модуля и нескольких собирающих модулей. 
# Собирающий модуль за один заход, находясь непосредственно 
# перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может 
# собрать за один заход собирающий модуль, находясь перед некоторым кустом 
# заданной во входном файле грядки.
# =========================================================================================
def solution2():
    def fill_list(lst, size):
        i = 1
        while size > 0:
            lst.append(int(input(f"Введите количество ягод {i}-го куста: ")))
            i += 1
            size -= 1
        return lst

    N = int(input("Введите количество кустов - "))
    collect_bush = 3
    max_berries = 0

    berries = []
    fill_list(berries, N)

    for i in range(len(berries)):
        sum = 0
        for j in range(collect_bush):
            sum += berries[j]
        if sum > max_berries:
            max_berries = sum
        temp = berries.pop(0)
        berries.append(temp)

    print(max_berries)
# =========================================================================================

# solution1()
solution2()