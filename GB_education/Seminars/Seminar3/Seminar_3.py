# Дан список чисел. Определите, сколько в нем встречается различных чисел.

# Input: [1, 1, 2, 0, -1, 3, 4, 4]

# Output: 6
# list_ = [1, 1, 2, 0, -1, 3, 4, 4]
# list_ = len(set(list_))
# print(list_)
# ======================================================================
# Дана последовательность из N целых чисел и число K. Необходимо сдвинуть всю последовательность (сдвиг - циклический) на K элементов вправо,  K – положительное число.

# Input:   [1, 2, 3, 4, 5] k = 3

# Output:  [4, 5, 1, 2, 3]

# ====== variant 1 =================
def var1():
    list_ = [1, 2, 3, 4, 5]
    k = 3
    list_1 = list_[:k]
    list_2 = list_[k:]
    list_2.extend(list_1)
    print(list_2)
# ====== variant 2 =================
def var2():
    list_ = [1, 2, 3, 4, 5]
    k = 3
    list_1 = list_[:k]
    list_2 = list_[k:]
    list_ = list_2 + list_1
    print(list_)
# ====== variant 3 =================
def var3():
    list_ = [1, 2, 3, 4, 5]
    k = 3
    print([*list_[k:], *list_[:k]])

# var1()
# var2()
# var3()

# =========================================================================
# 1.Создайте список из случайных чисел. 
# Найдите номер его последнего локального максимума 
# (локальный максимум — это элемент, который больше любого из своих соседей).

def local_max():
    import random
    list_ = [random.randint(0,10) for i in range(10)]
    print(list_)

    index = 0
    for i in range(len(list_)-1):
        if list_[i-1] < list_[i] > list_[i+1]:
            index = i
    print(index)

# local_max()

# ==========================================================================
# 3.Создайте список из случайных чисел. Найдите второй максимум.
# a = [1, 2, 3] # Первый максимум == 3, второй == 2

# import random
# list_ = [random.randint(0,10) for i in range(10)]
# print(list_)
# index = 0
# for i in range(len(list_)-1):
#     if list_[i-1] < list_[i] > list_[i+1]:
#         index = i
# print(max)



# =================================================
# Напишите программу для печати всех уникальных значений в словаре. 

# Input:  [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII ":" S007 "}] 

# Output: {'S005', 'S002', 'S007', 'S001', 'S009'}

def print_unique():
    lst = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": "S005"}, {" V ":"S009"}, {" VIII ":"S007"}] 
    res = [0]*len(lst)
    temp = []

    for i in range(len(lst)):
        res[i] = list(lst[i].values())

    for i in range(len(res)):
        if res[i] not in temp:
            temp.append(res[i])

    print(temp)

# print_unique()
'''
Решение предоставленное на семинаре
res = set(value.split() for diction in lst for value in diction.values())
'''
def print_unique2():
    lst = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": "S005"}, {" V ":"S009"}, {" VIII ":"S007"}] 
    res = set([value for diction in lst for value in diction.values()])
    print(res)

# print_unique2()

# =================================================
# Дан массив, состоящий из целых чисел. Напишите программу, 
# которая подсчитает количество элементов массива, 
# больших предыдущего (элемента с предыдущим номером) 
# Input: [0, -1, 5, 2, 3]
# Output: 2 
# Пояснение: (-1 < 5, 2 < 3)
def find_local_max():
    import random
    list_ = [random.randint(0,10) for i in range(5)]
    count = 0
    print(list_)
    for i in range(len(list_)-1):
        if list_[i+1] > list_[i]:
            count += 1
    print(count)

# find_local_max()
# =======================================================
# Задача №112287. Самые близкие
# Напишите программу, которая заполняет массив из N элементов случайными числами в диапазоне
# [A, B] и определяет номера двух элементов этого массива, которые расположены ближе
# всех друг к другу на числовой оси. Эти элемнеты не обязательно должны быть расположены рядом с друг другом
# Если таких пар несколько, нужно вывести номера элементов самой последней  из таких найденных пар
# =======================================================
# Задача №112288. Симметричные пары
# Пара элементов в массиве называется симметричной ,
#  если эти элементы находятся на одинаковом расстоянии 
# от концов массива. Так в массиве размером N 
# симметричными будут пары элементов с порядковыми 
# номерами 1 и N , 2 и N - 1 и т.д. 
# (при нумерации с единицы). Напишите программу, 
# которая заполняет массив из N элементов случайными 
# целыми числами в диапазоне [ A , B ] и определяет
#  номера двух симметричных элементов этого массива, 
# сумма которых чётная и максимальная среди всех пар 
# симметричных элементов. Если ни одной такой пары нет, 
# нужно вывести два нуля. Если есть несколько таких пар, 
# нужно вывести номера элементов, составляющих пару, ближайшую к центру массива.

# Входные данные
# Входная строка содержит три числа: границы диапазона случайных чисел A и B ,
#  а также размер массива N . Все числа разделены пробелами. Гарантируется, 
# что 0 < N ≤ 10000 .


# Выходные данные
# В первой строке программа должна вывести N элементов построенного массива, 
# разделив их пробелами, а во второй строке – 
# номера двух симметричных элементов массива, 
# имеющих максимальную чётную сумму. Если ни одной такой пары нет, нужно вывести два нуля.